mapview(df, zcol = c("QWHITE"), legend = TRUE, alpha.regions = 0.32)
mapview(df, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
### Subdivision
state = "Georgia"
county = c("Cherokee", "Cobb")
sub_map = get_acs(geography = "county subdivision", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
sub_map = sub_map %>% select(GEOID, NAME)
### Subdivision
sub_map = get_acs(geography = "county subdivision", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
sub_map = sub_map %>% select(GEOID, NAME)
acs_sub = get_acs(geography = "county subdivision", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
acs_sub_w = acs_sub %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df_sub = sub_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
mapview(df_sub, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
df_sub
acs_sub_w
sub_map
df_sub
View(df_sub)
### Subdivision
sub_map = get_acs(geography = "block group", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
sub_map = sub_map %>% select(GEOID, NAME)
acs_sub_w = acs_sub %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
mapview(df_sub, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
acs_sub = get_acs(geography = "block group", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
df_sub = sub_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
df_sub
v18 = load_variables(2018, "acs5", cache = TRUE)
View(v18)
mapview(df, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
library(tidycensus) #api with census
library(sf) #class and functions for vector data
library(tidyverse) #collection of r data tools, including dplyr
library(mapview)
year=2018
state = "Alabama"
county = c("Madison")
county_map = county_map %>% select(GEOID, NAME)
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
### Data from ACS-5yr
acs_vars_use = c("B01001B_001", "B01001A_001", "B01003_001")
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
mapview(df, zcol = c("QBLACK"), legend = TRUE, alpha.regions = 0.32)
# LIST OF VARIABLES
v18 = load_variables(2018, "acs5", cache = TRUE)
View(v18)
library(tidyverse)
library(readxl)
library(sf)
library(tidycensus)
library(tidycensus) #api with census
library(sf) #class and functions for vector data
library(tidyverse) #collection of r data tools, including dplyr
library(mapview)
year=2018
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county = c("Harris County")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
View(county_map)
county_map = county_map %>% select(GEOID, NAME)
### Data from ACS-5yr
acs_vars_use = c("B01001B_001", "B01001A_001", "B01003_001")
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
white = df %>%
ggplot(aes(fill = QWHITE)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
plot(white)
View(county_map)
write.csv(county_map, "/Users/paulmj/Documents/01_VECTOR/UH_CIVIC/Harris_census_2018.csv", row.names = TRUE)
county_map2 = county_map %>%
st_geometry(NULL)
county_map2 = county_map %>%
st_set_geometry(NULL)
write.csv(county_map2, "/Users/paulmj/Documents/01_VECTOR/UH_CIVIC/Harris_census_2018.csv", row.names = TRUE)
year=2019
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
county_map = county_map %>% select(GEOID, NAME)
### Data from ACS-5yr
acs_vars_use = c("B01001B_001", "B01001A_001", "B01003_001")
acs_data = get_acs(geography = "tract", state = state, county = county,
variables=acs_vars_use, year = year, geometry = FALSE)
#long to wide format
acs_data_w = acs_data %>%
select(-moe, -NAME) %>% #remove errors of estimates because we're spreading by variable and don't want duplicates, and don't need name b/c joining by GEOID
spread(key=variable, value = estimate)
df = county_map %>%
left_join(acs_data_w, by = "GEOID") %>% #join ACS_5yr data
mutate(QBLACK = B01001B_001 / B01003_001) %>%
mutate(QWHITE = B01001A_001 / B01003_001) %>%
dplyr::select(QWHITE, QBLACK)
white = df %>%
ggplot(aes(fill = QWHITE)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
black = df %>%
ggplot(aes(fill = QBLACK)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
county_map2 = county_map %>%
st_set_geometry(NULL)
write.csv(county_map2, "/Users/paulmj/Documents/01_VECTOR/UH_CIVIC/Harris_censustract_2019acs.csv", row.names = TRUE)
year=2020
### Geometry base - US Counties
options(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
?get_acs
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2020, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs5")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2020, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2021, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = 2019, geometry = TRUE,
cache_table = TRUE, survey = "acs1")
county_map = county_map %>% select(GEOID, NAME)
install.packages("stars")
library(tidyverse)
library(tidycensus)
library(sf)
library(terra)
library(stars)
load("~/Documents/01_VECTOR.nosync/Sandia/TX_group.Rda")
## Root zone data
TX_gdb =  "/Users/paulmj/Downloads/gSSURGO_TX/gSSURGO_TX.gdb"
TX_Valu1 = sf::st_read(dsn = TX_gdb, layer = "Valu1")
TX_group_val1 = TX_group %>% left_join(TX_Valu1, by = c("MUKEY" = "mukey"))
TX_group_val1_100 = TX_group_val1 %>%
filter(!is.na(rootznemc)) %>%
slice(1:100) %>%
select(MUKEY, rootznemc)
?st_rasterize
TX_rast100 = st_rasterize(TX_group_val1_100)
TX_rast100 = st_rasterize(TX_group_val1_100["rootznemc"])
plot(TX_rast100)
TX_rast = st_rasterize(TX_group_val1["rootznemc"])
plot(TX_rast)
rr = ggplot() +
geom_tile(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c()
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
#geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
geom_stars(data = TX_rast, aes(fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc), alpha = 0.8) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc), alpha = 0.9) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1) +
theme_bw()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1) +
theme_classic()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1) +
theme_minimal()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1)
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "white")
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray")
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_light()
rr
rr = ggplot() +
geom_stars(data = TX_rast, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_minimal()
rr
st_crs(TX_rast)
st_crs(TX_rast)$units_gdal
TX_rast_1k = st_rasterize(TX_group_val1["rootznemc"], dx = 1000, dy = 1000)
rr = ggplot() +
geom_stars(data = TX_rast_1k, aes(x = x, y = y, fill = rootznemc)) +
scale_fill_viridis_c(direction = -1, na.value = "gray") +
theme_minimal()
rr
install.packages("sqldf")
version
install.packages("sqldf")
install.packages("hurricaneexposure")
install.packages("caret")
install.packages("tidymodels")
install.packages("tune")
install.packages("workflows")
load("~/Documents/01_VECTOR.nosync/Sandia/Data/Sandia3_ml.RData")
options(java.parameters = "-Xmx7g")
library(bartMachine)
set_bart_machine_num_cores(4)
library(tidyverse)
library(tidymodels)
library(tidycensus)
library(sf)
library(lme4)
library(corrplot)
library(viridis)
#library(sqldf)
# GBM
show_model_info("boost_tree")
?dials
?set_engine
?ranger::importance
?ranger::ranger
?randomForest::randomForest
install.packages("xgboost")
?xgboost::xgb.train
gb_model = boost_tree(mode = "regression", trees = 1000,
min_n = tune(), tree_depth = tune(), learn_rate = tune(), loss_reduction = tune()) %>%
set_engine(engine = "xgboost")
gb_work = workflow() %>%
add_recipe(hours_recipe) %>%
add_model(gb_model)
gb_grid = dials::grid_max_entropy(parameters(min_n, tree_depth, learn_rate, loss_reduction), size = 100)
?min_n
gb_grid = dials::grid_max_entropy(parameters(min_n(), tree_depth(), learn_rate(), loss_reduction()), size = 100)
plot(gb_grid)
?tune_grid
gb_tune = gb_work %>%
tune_grid(resamples = df_cv,
grid = gb_grid,
metrics = metric_set(yardstick::rmse(), yardstick::rsq()))
gb_tune = gb_work %>%
tune_grid(resamples = df_cv,
grid = gb_grid,
metrics = metric_set(yardstick::rmse, yardstick::rsq))
?control_grid
gb_tune = gb_work %>%
tune_grid(resamples = df_cv,
grid = gb_grid,
metrics = metric_set(yardstick::rmse, yardstick::rsq),
control = tune::control_grid(verbose = T))
show_best(gb_tune, metric = "rmse")
save.image("~/Documents/01_VECTOR.nosync/Sandia/Data/Sandia3_ml.RData")
gb_tune_results = gb_tune %>% collect_metrics()
gb_best = gb_tune %>% select_best(metric = "rmse")
gb_fit = gb_work %>%
finalize_workflow(gb_best) %>%
last_fit(df_split)
gb_test = gb_fit %>% collect_metrics() #metrics evaluated on test sample (b/c last_fit() function)
gb_predictions = gb_fit %>% collect_predictions() #predictions for test sample (b/c last_fit() function)
save.image("~/Documents/01_VECTOR.nosync/Sandia/Data/Sandia3_ml.RData")
##########################################################################################
#### LOAD PACKAGES AND SET WORKING DIRECTORY #############################################
##########################################################################################
require(tidyverse)
require(tidycensus)
require(sf)
require(terra)
require(stars)
require(raster)
require(ncdf4)
require(lubridate)
require(spdep)
require(tidyverse)
require(tidycensus)
require(sf)
require(xgboost)
require(viridis)
setwd("~/Documents/Civic2") #download GitHub folder to this location
##########################################################################################
#### LOAD DATA ###########################################################################
##########################################################################################
## Census Map
mycrs = 5070 #chose projected coordinate system: EPSG 5070 NAD83 Conus Albers
year=2019 # year for county boundaries
options(tigris_use_cache = TRUE) #cache shapefiles for future sessions
soptions(tigris_use_cache = TRUE) #to cache shapefiles for future sessions
options(tigris_use_cache = TRUE) #cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
census_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
census_map = census_map %>%
mutate(POPULATION = estimate) %>%
dplyr::select(GEOID, NAME, POPULATION) %>%
st_transform(mycrs) # project to Conic Equal Area Albers, EPSG:5070
census_map_area = census_map %>%
mutate(AREA = as.vector(st_area(census_map))) %>% #sq-meters; as.vector removes units suffix
mutate(DENSITY = POPULATION / AREA * 1000^2) #population per sq-km
## NLCD Land Type
load(file = "./Data/census_map_nlcd.Rda")
census_map_nlcd = census_map_nlcd %>% st_set_geometry(NULL)
## Digital Elevation Map
load(file = "./Data/census_map_dem.Rda")
census_map_dem = census_map_dem %>% st_set_geometry(NULL)
## Root Zone
load(file = "./Data/census_map_rz.Rda")
census_map_rz = census_map_rz %>% st_set_geometry(NULL)
## Socio-Economic
load(file = "./Data/census_map_social.Rda")
census_map_social = census_map_social %>% st_set_geometry(NULL)
## SPI drought
load(file = "./Data/census_map_spi.Rda")
census_map_spi = census_map_spi %>% st_set_geometry(NULL)
## Harvey wind forecast
load(file = "./Data/census_map_WINDmax.Rda")
census_map_WINDmax = census_map_WINDmax %>% st_set_geometry(NULL)
# Join everything together
census_map_CLEAN = census_map_area %>%
dplyr::select(GEOID, DENSITY) %>%
inner_join(dplyr::select(census_map_nlcd, c(GEOID, Developed:Wetlands)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_dem, c(GEOID, DEM_mean:DEM_max)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_rz, c(GEOID, RZ_mean:RZ_mode)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_social, c(GEOID, 1, 6:ncol(census_map_social))), by = "GEOID") %>%
inner_join(dplyr::select(census_map_spi, c(GEOID, spi03_mean:spi24_mean)), by = "GEOID") %>%
inner_join(census_map_WINDmax, by = "GEOID") %>%
rename(spi03_lag = spi03_mean, spi12_lag = spi12_mean, spi24_lag = spi24_mean,
Density = DENSITY)
##########################################################################################
#### MODEL  ##############################################################################
##########################################################################################
load(file = "xgb_final_model.Rda")
##########################################################################################
#### MODEL  ##############################################################################
##########################################################################################
load(file = "xgb_final_model.Rda")
X = census_map_CLEAN %>%
dplyr::select(xgb_final_model$feature_names) %>%
st_set_geometry(NULL) %>%
as.matrix()
predictions = predict(xgb_final_model, X)
require(spdep)
localg_weights = nb2listw(include.self(neighbors)) #include self as a neighbor for Local Gi* test
## Getis-Ord Gi* HotSpot Analysis
neighbors = poly2nb(Harris_map, queen = T) #find census tract polygon neighbors
##########################################################################################
#### RISK MAP  ###########################################################################
##########################################################################################
## Map of model predictions (raw and normalized)
Harris_map = census_map_FINAL %>%
mutate(risk = predictions) %>%
mutate(risk_static = predictions_static) %>%
mutate(risk01 = (risk - min(predictions)) / (max(predictions) - min(predictions))) %>%
mutate(risk01_static = (risk_static - min(predictions_static)) / (max(predictions_static) - min(predictions_static)))
census_map_FINAL = census_map_CLEAN
X = census_map_FINAL %>%
dplyr::select(xgb_final_model$feature_names) %>%
st_set_geometry(NULL) %>%
as.matrix()
##########################################################################################
#### RISK MAP  ###########################################################################
##########################################################################################
## Map of model predictions (raw and normalized)
Harris_map = census_map_FINAL %>%
mutate(risk = predictions) %>%
mutate(risk_static = predictions_static) %>%
mutate(risk01 = (risk - min(predictions)) / (max(predictions) - min(predictions))) %>%
mutate(risk01_static = (risk_static - min(predictions_static)) / (max(predictions_static) - min(predictions_static)))
##########################################################################################
#### RISK MAP  ###########################################################################
##########################################################################################
## Map of model predictions (raw and normalized)
Harris_map = census_map_FINAL %>%
mutate(risk = predictions) %>%
mutate(risk01 = (risk - min(predictions)) / (max(predictions) - min(predictions)))
## Getis-Ord Gi* HotSpot Analysis
neighbors = poly2nb(Harris_map, queen = T) #find census tract polygon neighbors
localg_weights = nb2listw(include.self(neighbors)) #include self as a neighbor for Local Gi* test
local_gistar = localG(Harris_map$risk01, localg_weights)
Harris_map$gistar = local_gistar
Harris_map = Harris_map %>%
mutate(gistar01 = (gistar - min(local_gistar)) / (max(local_gistar) - min(local_gistar))) #normalize Gi*
## Plot Map
gg2 = ggplot(Harris_map)+
geom_sf(aes(fill = gistar01), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
theme_dark() +
labs(title = "Harris County - Power Outage Risk (Static)", fill = "Risk") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
gg2
## Plot Map
gg2 = ggplot(Harris_map)+
geom_sf(aes(fill = gistar01), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
theme_dark() +
labs(title = "Harris County - Power Outage Risk", fill = "Risk") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
print(gg2)
