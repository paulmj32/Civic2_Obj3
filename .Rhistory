save.image("~/Documents/01_VECTOR.nosync/Sandia/Data/Sandia3_ml.RData")
load("~/Documents/01_VECTOR.nosync/Sandia/Data/Sandia4_Final_hrs.RData")
plot_filtering_estimates2(gg)
load("~/Documents/01_VECTOR.nosync/Sandia/Data/Sandia4_Final_hrs.RData")
summary(df_hours)
install.packages("plumber")
install.packages("curl")
##########################################################################################
require(plumber)
require(tidyverse)
require(tidycensus)
require(sf)
require(xgboost)
require(viridis)
require(spdep)
setwd("~/Documents/Civic2") #download GitHub folder to this location
##########################################################################################
#### LOAD DATA ###########################################################################
##########################################################################################
## Census Map
mycrs = 5070 #chose projected coordinate system: EPSG 5070 NAD83 Conus Albers
year=2019 # year for county boundaries
options(tigris_use_cache = TRUE) #cache shapefiles for future sessions
state = "Texas"
county = c("Harris County")
census_map = get_acs(geography = "tract", state = state, county = county,
variables=c("B01003_001"), year = year, geometry = TRUE,
cache_table = TRUE)
census_map = census_map %>%
mutate(POPULATION = estimate) %>%
dplyr::select(GEOID, NAME, POPULATION) %>%
st_transform(mycrs) # project to Conic Equal Area Albers, EPSG:5070
census_map_area = census_map %>%
mutate(AREA = as.vector(st_area(census_map))) %>% #sq-meters; as.vector removes units suffix
mutate(DENSITY = POPULATION / AREA * 1000^2) #population per sq-km
## NLCD Land Type
load(file = "./Data/census_map_nlcd.Rda")
census_map_nlcd = census_map_nlcd %>% st_set_geometry(NULL)
## Digital Elevation Map
load(file = "./Data/census_map_dem.Rda")
census_map_dem = census_map_dem %>% st_set_geometry(NULL)
## Root Zone
load(file = "./Data/census_map_rz.Rda")
census_map_rz = census_map_rz %>% st_set_geometry(NULL)
## Socio-Economic
load(file = "./Data/census_map_social.Rda")
census_map_social = census_map_social %>% st_set_geometry(NULL)
## SPI drought
load(file = "./Data/census_map_spi.Rda")
census_map_spi = census_map_spi %>% st_set_geometry(NULL)
## Harvey wind forecast
load(file = "./Data/census_map_WINDmax.Rda")
census_map_WINDmax = census_map_WINDmax %>% st_set_geometry(NULL)
# Join everything together
census_map_CLEAN = census_map_area %>%
dplyr::select(GEOID, DENSITY) %>%
inner_join(dplyr::select(census_map_nlcd, c(GEOID, Developed:Wetlands)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_dem, c(GEOID, DEM_mean:DEM_max)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_rz, c(GEOID, RZ_mean:RZ_mode)), by = "GEOID") %>%
inner_join(dplyr::select(census_map_social, c(GEOID, 1, 6:ncol(census_map_social))), by = "GEOID") %>%
inner_join(dplyr::select(census_map_spi, c(GEOID, spi03_mean:spi24_mean)), by = "GEOID") %>%
inner_join(census_map_WINDmax, by = "GEOID") %>%
rename(spi03_lag = spi03_mean, spi12_lag = spi12_mean, spi24_lag = spi24_mean,
Density = DENSITY)
##########################################################################################
#### MODEL  ##############################################################################
##########################################################################################
load(file = "xgb_final_model.Rda")
census_map_FINAL = census_map_CLEAN
X = census_map_FINAL %>%
dplyr::select(xgb_final_model$feature_names) %>%
st_set_geometry(NULL) %>%
as.matrix()
predictions = predict(xgb_final_model, X)
##########################################################################################
#### RISK MAP  ###########################################################################
##########################################################################################
## Map of model predictions (raw and normalized)
Harris_map = census_map_FINAL %>%
mutate(risk = predictions) %>%
mutate(risk01 = (risk - min(predictions)) / (max(predictions) - min(predictions)))
## Getis-Ord Gi* HotSpot Analysis
neighbors = poly2nb(Harris_map, queen = T) #find census tract polygon neighbors
localg_weights = nb2listw(include.self(neighbors)) #include self as a neighbor for Local Gi* test
local_gistar = localG(Harris_map$risk01, localg_weights)
Harris_map$gistar = local_gistar
Harris_map = Harris_map %>%
mutate(gistar01 = (gistar - min(local_gistar)) / (max(local_gistar) - min(local_gistar))) #normalize Gi*
## Plot Map
gg2 = ggplot(Harris_map)+
geom_sf(aes(fill = gistar01), color = NA) +
scale_fill_viridis_c(option="plasma", na.value = "grey50") +
theme_dark() +
labs(title = "Harris County - Power Outage Risk", fill = "Risk") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
print(gg2)
## Output to csv
obj3_out = Harris_map %>%
#dplyr::filter(GEOID %in% obj3_tracts) %>%
arrange(GEOID) %>%
mutate(geoId = GEOID) %>%
mutate(vulnerabilityIndex = as.numeric(gistar01)) %>%
dplyr::select(geoId, vulnerabilityIndex) %>%
st_set_geometry(NULL) %>%
dplyr::slice(1:10)
#write.csv(obj3_out, file = "./Data/obj3_out.csv", row.names = FALSE)
require(jsonlite)
#require(httr)
require(curl)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
?curl
require(httr)
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
result = POST(api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json")))
Output <- content(result)
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
obj3_out_json
obj3_out_json
#GET try
get = GET(url = api)
#GET try
get = GET(url = api)
#GET try
get = GET(url = api)
get_content_text = content(get, as = "text", encoding = "UTF-8")
get_content_json = fromJSON(get_content_text)
View(get_content_json)
View(obj3_out)
obj3_out_json
class(obj3_out_json)
?POST
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json")))
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/problem+json")))
POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/problem+json")))
?toJSON
?POST
?toString
?toJSON
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T, dataframe = "values")
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json")))
Output = content(result)
obj3_out_json
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T, dataframe = "rows")
obj3_out_json
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T, dataframe = "rows")
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json")))
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T, dataframe = "columns")
obj3_out
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json")))
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T) %>% as.character()
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json")))
Output = content(result)
obj3_out_json
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = F)
obj3_out_json
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json")))
Output = content(result)
POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json")))
result = POST(url = api,
body = obj3_out_json,
encode = "form")
## Output to csv
obj3_out = Harris_map %>%
#dplyr::filter(GEOID %in% obj3_tracts) %>%
arrange(GEOID) %>%
mutate(geoId = GEOID) %>%
mutate(vulnerabilityIndex = as.numeric(gistar01)) %>%
dplyr::select(geoId, vulnerabilityIndex) %>%
st_set_geometry(NULL) %>%
dplyr::slice(1:10)
require(jsonlite)
require(httr)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
result = POST(url = api,
body = obj3_out_json,
encode = "form")
result = POST(url = api,
body = obj3_out_json,
encode = "raw")
obj3_out_json
?POST
result = POST(url = api,
body = obj3_out_json,
encode = "json")
result = POST(url = api,
body = obj3_out_json)
?`toJSON, fromJSON`
b2 <- "http://httpbin.org/post"
POST(b2, body = "A simple text string")
POST(b2, body = list(x = "A simple text string"))
POST(b2, body = list(y = upload_file(system.file("CITATION"))))
POST(b2, body = list(x = "A simple text string"), encode = "json")
# body can also be provided as a json string directly to deal
# with specific case, like an empty element in the json string.
# passing as string directly
POST(b2, body = '{"a":1,"b":{}}', encode = "raw")
# or building the json string before
json_body <- jsonlite::toJSON(list(a = 1, b = NULL), auto_unbox = TRUE)
POST(b2, body = json_body, encode = "raw")
result = POST(url = api,
body = obj3_out_json)
result$content
result = POST(url = api,
encode = "raw",
body = obj3_out_json)
result = POST(url = api,
body = obj3_out_json)
l
result = POST(url = api,
encode = "raw",
body = obj3_out_json)
?accept_json
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json"))
)
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type"="application/json; charset=utf-8"))
)
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json; charset=utf-8",
"Transfer-Encoding" = "chunked",
"Content-Encoding" = "gzip",
"Vary" = "Accept-Encoding",
"Server" = "Microsoft-IIS/10.0",
"X-Powered-By" = "ASP.NET"
))
)
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "text/plain"
))
)
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"
))
)
library(curl)
?curl
obj3_out_json
obj3_out_json
require(jsonlite)
require(httr)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"
))
)
Output = content(result)
require(jsonlite)
require(httr)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"
))
)
Output = content(result); paste0(Output)
require(jsonlite)
require(httr)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"
))
)
Output = content(result); paste(Output)
require(jsonlite)
require(httr)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
result = POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"
))
)
Output = content(result); paste(Output)
POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"))
)
require(jsonlite)
require(httr)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"))
require(jsonlite)
require(httr)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"))
)
#GET try
get = GET(url = api)
get_content_text = content(get, as = "text", encoding = "UTF-8")
get_content_json = fromJSON(get_content_text)
?add_headers
POST(url = api,
body = obj3_out_json,
content_type_json(),
add_headers(.headers = c("Content-Type" = "application/json"))
)
POST(url = api,
body = obj3_out_json,
content_type_json()
#add_headers(.headers = c("Content-Type" = "application/json"))
)
?POST
POST(url = api,
#body = obj3_out_json,
body = "",
content_type_json()
#add_headers(.headers = c("Content-Type" = "application/json"))
)
POST(url = api,
body = list(obj3_out_json),
content_type_json()
#add_headers(.headers = c("Content-Type" = "application/json"))
)
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = list(toJSON(obj3_out, pretty = T))
POST(url = api,
body = obj3_out_json,
content_type_json()
#add_headers(.headers = c("Content-Type" = "application/json"))
)
POST(url = api,
body = obj3_out_json,
content_type_json()
#add_headers(.headers = c("Content-Type" = "application/json"))
)
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
POST(url = api,
body = as.character(obj3_out_json),
content_type_json()
#add_headers(.headers = c("Content-Type" = "application/json"))
)
POST(url = api,
body = as.vector(obj3_out_json),
content_type_json()
#add_headers(.headers = c("Content-Type" = "application/json"))
)
as.vector(obj3_out_json
)
POST(url = api,
body = obj3_out_json,
encode = "json",
content_type_json()
#add_headers(.headers = c("Content-Type" = "application/json"))
)
POST(url = api,
body = obj3_out_json,
encode = "json"
#content_type_json()
#add_headers(.headers = c("Content-Type" = "application/json"))
)
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
POST(url = api,
body = obj3_out_json,
encode = "json",
#content_type_json()
add_headers(.headers = c("Content-Type" = "application/json",
"Content-Encoding" = "gzip"))
)
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
POST(url = api,
body = obj3_out_json,
encode = "json",
#content_type_json()
add_headers(.headers = c(#"Content-Type" = "application/json",
"Content-Encoding" = "gzip"))
)
?raw
raw(obj3_out_json)
POST(url = api,
body = obj3_out_json,
encode = "json",
#content_type_json()
add_headers(.headers = c(#"Content-Type" = "application/json",
"Content-Encoding" = "gzip"))
)
POST(url = api,
body = obj3_out_json,
accept_json(),
#content_type_json()
add_headers(.headers = c(#"Content-Type" = "application/json",
"Content-Encoding" = "gzip"))
)
api2 = "https://reqbin.com/sample/post/json"
POST(url = api2,
body = obj3_out_json,
accept_json(),
#content_type_json()
add_headers(.headers = c(#"Content-Type" = "application/json",
"Content-Encoding" = "gzip"))
)
api2 = "https://a0f885d8-c9d4-47c7-b4c9-c3f6b76a72ed.mock.pstmn.io"
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
POST(url = api2,
body = obj3_out_json,
accept_json()
#content_type_json()
# add_headers(.headers = c(#"Content-Type" = "application/json",
#                          "Content-Encoding" = "gzip"))
)
api2 = "https://269a5777-047e-4d5a-94f8-6c8dfee7001c.mock.pstmn.io"
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
POST(url = api2,
body = obj3_out_json,
accept_json(),
content_type_json()
# add_headers(.headers = c(#"Content-Type" = "application/json",
#                          "Content-Encoding" = "gzip"))
)
POST(url = api2,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"))
)
## Output to csv
obj3_out = Harris_map %>%
#dplyr::filter(GEOID %in% obj3_tracts) %>%
arrange(GEOID) %>%
mutate(geoId = GEOID) %>%
mutate(vulnerabilityIndex = as.numeric(gistar01)) %>%
dplyr::select(geoId, vulnerabilityIndex) %>%
st_set_geometry(NULL) %>%
dplyr::slice(1:50)
require(jsonlite)
require(httr)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
api2 = "https://269a5777-047e-4d5a-94f8-6c8dfee7001c.mock.pstmn.io"
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
POST(url = api2,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"))
)
require(jsonlite)
require(httr)
api = 'https://civic2-webapi.azurewebsites.net/powergridvulnerability'
api2 = "https://269a5777-047e-4d5a-94f8-6c8dfee7001c.mock.pstmn.io"
#https://stackoverflow.com/questions/39809117/how-to-post-api-in-r-having-header-json-body
obj3_out_json = toJSON(obj3_out, pretty = T)
POST(url = api,
body = obj3_out_json,
add_headers(.headers = c("Content-Type" = "application/json"))
)
